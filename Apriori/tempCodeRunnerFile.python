from itertools import combinations

# Sample transactions
transactions = [
    {'1', '2', '5'},
    {'2', '4'},
    {'2', '3'},
    {'1','2', '4'},
    {'1', '3'},
    {'2','3'},
    {'1','3'},
    {'1', '2','3', '5'},
    {'1','2','3'}
]

min_support = 2  # Minimum support count
frequent_itemsets = []

# Step 1: Find frequent 1-itemsets
item_counts = {}
for transaction in transactions:
    for item in transaction:
        if item not in item_counts:
            item_counts[item] = 0
        item_counts[item] += 1

# Filter 1-itemsets based on minimum support
current_itemsets = {frozenset([item]) for item, count in item_counts.items() if count >= min_support}
frequent_itemsets.extend(current_itemsets)

# Step 2: Generate larger itemsets until no more frequent itemsets are found
k = 2
while current_itemsets:
    candidate_itemsets = set()
    # Generate candidate itemsets by combining pairs of current itemsets
    for itemset1 in current_itemsets:
        for itemset2 in current_itemsets:
            union_itemset = itemset1 | itemset2
            if len(union_itemset) == k:  # Only consider combinations of size k
                candidate_itemsets.add(union_itemset)

    # Count support for candidate itemsets
    itemset_counts = {itemset: 0 for itemset in candidate_itemsets}
    for transaction in transactions:
        for itemset in candidate_itemsets:
            if itemset.issubset(transaction):
                itemset_counts[itemset] += 1

    # Filter candidates based on minimum support
    current_itemsets = {itemset for itemset, count in itemset_counts.items() if count >= min_support}
    frequent_itemsets.extend(current_itemsets)
    k += 1

# Output results
print("Frequent itemsets with minimum support count of", min_support)
for itemset in frequent_itemsets:
    print(itemset)
